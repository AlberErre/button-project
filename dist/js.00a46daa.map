{"version":3,"sources":["../src/index.js","js/index.js"],"names":["const","let","dice","document","getElementById","button","records","mean","PastLaunches","meanValue","randomNumber","number","Math","round","random","push","innerHTML","calculateMean","sum","i","length","showRecords","str","onclick"],"mappings":"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","file":"js.00a46daa.map","sourceRoot":"../src","sourcesContent":["const TAGS = {\n\t'' : ['<em>','</em>'],\n\t_ : ['<strong>','</strong>'],\n\t'\\n' : ['<br />'],\n\t' ' : ['<br />'],\n\t'-': ['<hr />']\n};\n\n/** Outdent a string based on the first indented line's leading whitespace\n *\t@private\n */\nfunction outdent(str) {\n\treturn str.replace(RegExp('^'+(str.match(/^(\\t| )+/) || '')[0], 'gm'), '');\n}\n\n/** Encode special attribute characters to HTML entities in a String.\n *\t@private\n */\nfunction encodeAttr(str) {\n\treturn (str+'').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n\n/** Parse Markdown into an HTML String. */\nexport default function parse(md) {\n\tlet tokenizer = /((?:^|\\n+)(?:\\n---+|\\* \\*(?: \\*)+)\\n)|(?:^```(\\w*)\\n([\\s\\S]*?)\\n```$)|((?:(?:^|\\n+)(?:\\t|  {2,}).+)+\\n*)|((?:(?:^|\\n)([>*+-]|\\d+\\.)\\s+.*)+)|(?:\\!\\[([^\\]]*?)\\]\\(([^\\)]+?)\\))|(\\[)|(\\](?:\\(([^\\)]+?)\\))?)|(?:(?:^|\\n+)([^\\s].*)\\n(\\-{3,}|={3,})(?:\\n+|$))|(?:(?:^|\\n+)(#{1,3})\\s*(.+)(?:\\n+|$))|(?:`([^`].*?)`)|(  \\n\\n*|\\n{2,}|__|\\*\\*|[_*])/gm,\n\t\tcontext = [],\n\t\tout = '',\n\t\tlast = 0,\n\t\tlinks = {},\n\t\tchunk, prev, token, inner, t;\n\n\tfunction tag(token) {\n\t\tvar desc = TAGS[token.replace(/\\*/g,'_')[1] || ''],\n\t\t\tend = context[context.length-1]==token;\n\t\tif (!desc) return token;\n\t\tif (!desc[1]) return desc[0];\n\t\tcontext[end?'pop':'push'](token);\n\t\treturn desc[end|0];\n\t}\n\n\tfunction flush() {\n\t\tlet str = '';\n\t\twhile (context.length) str += tag(context[context.length-1]);\n\t\treturn str;\n\t}\n\n\tmd = md.replace(/^\\[(.+?)\\]:\\s*(.+)$/gm, (s, name, url) => {\n\t\tlinks[name.toLowerCase()] = url;\n\t\treturn '';\n\t}).replace(/^\\n+|\\n+$/g, '');\n\n\twhile ( (token=tokenizer.exec(md)) ) {\n\t\tprev = md.substring(last, token.index);\n\t\tlast = tokenizer.lastIndex;\n\t\tchunk = token[0];\n\t\tif (prev.match(/[^\\\\](\\\\\\\\)*\\\\$/)) {\n\t\t\t// escaped\n\t\t}\n\t\t// Code/Indent blocks:\n\t\telse if (token[3] || token[4]) {\n\t\t\tchunk = '<pre class=\"code '+(token[4]?'poetry':token[2].toLowerCase())+'\">'+outdent(encodeAttr(token[3] || token[4]).replace(/^\\n+|\\n+$/g, ''))+'</pre>';\n\t\t}\n\t\t// > Quotes, -* lists:\n\t\telse if (token[6]) {\n\t\t\tt = token[6];\n\t\t\tif (t.match(/\\./)) {\n\t\t\t\ttoken[5] = token[5].replace(/^\\d+/gm, '');\n\t\t\t}\n\t\t\tinner = parse(outdent(token[5].replace(/^\\s*[>*+.-]/gm, '')));\n\t\t\tif (t==='>') t = 'blockquote';\n\t\t\telse {\n\t\t\t\tt = t.match(/\\./) ? 'ol' : 'ul';\n\t\t\t\tinner = inner.replace(/^(.*)(\\n|$)/gm, '<li>$1</li>');\n\t\t\t}\n\t\t\tchunk = '<'+t+'>' + inner + '</'+t+'>';\n\t\t}\n\t\t// Images:\n\t\telse if (token[8]) {\n\t\t\tchunk = `<img src=\"${encodeAttr(token[8])}\" alt=\"${encodeAttr(token[7])}\">`;\n\t\t}\n\t\t// Links:\n\t\telse if (token[10]) {\n\t\t\tout = out.replace('<a>', `<a href=\"${encodeAttr(token[11] || links[prev.toLowerCase()])}\">`);\n\t\t\tchunk = flush() + '</a>';\n\t\t}\n\t\telse if (token[9]) {\n\t\t\tchunk = '<a>';\n\t\t}\n\t\t// Headings:\n\t\telse if (token[12] || token[14]) {\n\t\t\tt = 'h' + (token[14] ? token[14].length : (token[13][0]==='='?1:2));\n\t\t\tchunk = '<'+t+'>' + parse(token[12] || token[15]) + '</'+t+'>';\n\t\t}\n\t\t// `code`:\n\t\telse if (token[16]) {\n\t\t\tchunk = '<code>'+encodeAttr(token[16])+'</code>';\n\t\t}\n\t\t// Inline formatting: *em*, **strong** & friends\n\t\telse if (token[17] || token[1]) {\n\t\t\tchunk = tag(token[17] || '--');\n\t\t}\n\t\tout += prev;\n\t\tout += chunk;\n\t}\n\n\treturn (out + md.substring(last) + flush()).trim();\n}\n","import snarkdown from 'snarkdown';\n\nconst dice = document.getElementById(\"dice\");\nconst button = document.getElementById(\"button\");\nconst records = document.getElementById(\"records\");\nconst mean = document.getElementById(\"mean\");\n\nlet PastLaunches = [];\nlet meanValue;\n\n\nlet randomNumber = () => {\n\n  let number = Math.round( (Math.random() * 5 ) + 1);\n  PastLaunches.push(number);\n  dice.innerHTML = number;\n  records.innerHTML = PastLaunches;\n  mean.innerHTML = calculateMean();\n\n}\n\nlet calculateMean = () => {\n    let sum = 0;\n\n    for (let i = 0; i < PastLaunches.length; i++) {\n        sum = sum + PastLaunches[i];\n    }\n\n    meanValue = sum/PastLaunches.length;\n    return meanValue;\n}\n\nlet showRecords = () => {\n\n    let str = \"<table>\";\n\n    for (let i = 0; i < PastLaunches.length; i++) {\n        str = str + \"<tr><td>\" + PastLaunches[i] + \"</td></tr>\";\n    }\n\n    str = str + \"</table>\";\n\n}\n\nbutton.onclick = () => randomNumber();\n\n\n\n\n"]}